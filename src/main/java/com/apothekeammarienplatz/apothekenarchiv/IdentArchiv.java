/*
 * Copyright (C) 2021 asys
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.apothekeammarienplatz.apothekenarchiv;

import java.nio.file.FileAlreadyExistsException;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author asys
 */
public class IdentArchiv extends javax.swing.JPanel {

    private DefaultListModel listModel;

    /**
     * Creates new form IdentArchiv
     */
    public IdentArchiv() {
        initComponents();
    }

    private Map<Integer, String> getStoffListe(String stoffNameTeil) {
        StoffDatabaseReader stoffDatabaseReader = new StoffDatabaseReader();
        Map<Integer, String> stoffListe = stoffDatabaseReader.getStoffListe(stoffNameTeil);
        return stoffListe;
    }

    private String vorschlagenChargenNummer() {
        Date heute = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("YYYY MM dd", Locale.GERMANY);
        /**
         * TODO: Statt der "1" könnte man direkt den nächsten noch nicht
         * verwendeten int verwenden. Dazu müsste das Programm eine Datenbank zu
         * den bereits durchgeführten Prüfungen führen.
         */
        String chargenNummer = simpleDateFormat.format(heute) + " - " + "1";
        return chargenNummer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaAusgabe = new javax.swing.JTextArea();
        dateiPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel1.setText("Stoffname");

        jTextField2.setText(vorschlagenChargenNummer());
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Chargennummer");

        startButton.setText("Scannen");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Zurück");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        Map<Integer, String> stoffListe = getStoffListe("");
        listModel = new DefaultListModel();
        listModel.addAll(stoffListe.values());
        jList1.setModel(listModel
        );
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setVisibleRowCount(5);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTextAreaAusgabe.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaAusgabe.setColumns(20);
        jTextAreaAusgabe.setFont(new java.awt.Font("Courier New", 0, 8)); // NOI18N
        jTextAreaAusgabe.setLineWrap(true);
        jTextAreaAusgabe.setRows(5);
        jTextAreaAusgabe.setText("Ausgabe");
        jTextAreaAusgabe.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextAreaAusgabe);

        dateiPanel.setBackground(new java.awt.Color(0, 255, 51));
        dateiPanel.setVisible(false);

        jButton1.setText("Datei anzeigen");

        jButton2.setText("Unterschrift prüfen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dateiPanelLayout = new javax.swing.GroupLayout(dateiPanel);
        dateiPanel.setLayout(dateiPanelLayout);
        dateiPanelLayout.setHorizontalGroup(
            dateiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dateiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        dateiPanelLayout.setVerticalGroup(
            dateiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        MainMenu mainMenuFrame = (MainMenu) SwingUtilities.getRoot(this);
        mainMenuFrame.showPanel("startJPanelName");

    }//GEN-LAST:event_cancelButtonActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        String text = jTextField1.getText();
        Map<Integer, String> stoffListe = getStoffListe(text);
        listModel.clear();
        listModel.addAll(stoffListe.values());
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        String ausgewählterStoff = jList1.getSelectedValue();
        if (null != ausgewählterStoff) {
            jTextField1.setText(ausgewählterStoff);
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try {
            String chargenNummer = jTextField2.getText();
            String stoffName = jTextField1.getText();
            if ("".equals(stoffName)) {
                return;
            }
            boolean copyEncrypted = false;//TODO: Sollte hier eine Auswahl möglich sein?
            String subDirectoryString = "Prüfprotokolle";
            String fileNameString;
            fileNameString = stoffName + " " + chargenNummer + ".pdf";
            System.out.println("fileNameString:");
            System.out.println(fileNameString);
            System.out.println("Versuche zu scannen:");

            ScannerWrapper scannerWrapper = new ScannerWrapper(fileNameString, "Prüfprotokolle");
            jTextAreaAusgabe.append(System.getProperty("line.separator"));
            jTextAreaAusgabe.append(scannerWrapper.getCommandOutput());
            System.out.println("Versuche zu signieren:");
            CryptoWrapper cryptoWrapper = new CryptoWrapper(fileNameString, subDirectoryString, copyEncrypted);
            jTextAreaAusgabe.append(System.getProperty("line.separator"));
            jTextAreaAusgabe.append(cryptoWrapper.getCommandOutput());

            jTextAreaAusgabe.append("<a href=" + fileNameString + ">" + fileNameString + "</a>");
            DatabaseWrapper databaseWrapper = new DatabaseWrapper();
            PreparedStatement preparedStatement = databaseWrapper.prepareStatement("INSERT INTO `identitätsarchiv` SET `stoffName` = ?, `chargenNummer` = ?, `dateiName` = ?, `dateiNameUnterschrift` = ?");
            preparedStatement.setString(1, stoffName);
            preparedStatement.setString(2, chargenNummer);
            preparedStatement.setString(3, fileNameString);
            preparedStatement.setString(4, fileNameString + CryptoWrapper.FILENAME_EXTENSION_SIGNATURE);
            preparedStatement.execute();

            jTextAreaAusgabe.append("Fertig");
            dateiPanel.setVisible(true);
        } catch (FileAlreadyExistsException ex) {
            String existingFileName = ex.getFile();
            /**
             * Die Datei existiert bereits. Wir erstellen eine Frage an den
             * Benutzer. Wenn der Benutzer es wünscht, können die alten Dateien
             * überschrieben werden und durch neue ersetzt werden.
             */
            // Erzeugung eines neuen Frames mit
            //JOptionPane overwriteOptionPane = new JOptionPane();
            // Titel wird gesetzt
            //overwriteOptionPane.setTitle("Datei überschreiben?");
            int überschreibenAntwort = JOptionPane.showConfirmDialog(null, "Die Datei existiert bereits. Soll sie überschrieben werden?", "Datei überschreiben", JOptionPane.YES_NO_OPTION);
            System.out.println(überschreibenAntwort);
            if (1 == überschreibenAntwort) {
                /**
                 * Der Nutzer möchte die Datei nicht überschreiben:
                 */
                return;
            }
            if (0 == überschreibenAntwort) {
                /**
                 * Die alte Datei wird überschrieben. Danach kann die neue Datei
                 * erstellt werden. Wir löschen sowohl die PDF-datei, als auch
                 * die eventuell existierende Signatur und die verschlüsselte
                 * Datei.
                 */
                //JOptionPane.showConfirmDialog(null, existingFileName, "Delete!", JOptionPane.DEFAULT_OPTION);
                boolean deleteSuccess = ScannerWrapper.deleteFile(existingFileName);
                System.out.println(deleteSuccess);
                /**
                 * Achtung Rekursion! Jetzt, nach dem Löschen können wir die
                 * gleiche Funktion noch einmal aufrufen:
                 */
                startButtonActionPerformed(evt);
            }

        } catch (Exception ex) {
            Logger.getLogger(IdentArchiv.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel dateiPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaAusgabe;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
